// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"backed/app/models"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTradeHash(db *gorm.DB, opts ...gen.DOOption) tradeHash {
	_tradeHash := tradeHash{}

	_tradeHash.tradeHashDo.UseDB(db, opts...)
	_tradeHash.tradeHashDo.UseModel(&models.TradeHash{})

	tableName := _tradeHash.tradeHashDo.TableName()
	_tradeHash.ALL = field.NewAsterisk(tableName)
	_tradeHash.ID = field.NewUint(tableName, "id")
	_tradeHash.CreatedAt = field.NewTime(tableName, "created_at")
	_tradeHash.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tradeHash.DeletedAt = field.NewField(tableName, "deleted_at")
	_tradeHash.PackageId = field.NewString(tableName, "package_id")
	_tradeHash.TransactionHash = field.NewString(tableName, "transaction_hash")

	_tradeHash.fillFieldMap()

	return _tradeHash
}

type tradeHash struct {
	tradeHashDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	PackageId       field.String
	TransactionHash field.String

	fieldMap map[string]field.Expr
}

func (t tradeHash) Table(newTableName string) *tradeHash {
	t.tradeHashDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tradeHash) As(alias string) *tradeHash {
	t.tradeHashDo.DO = *(t.tradeHashDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tradeHash) updateTableName(table string) *tradeHash {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.PackageId = field.NewString(table, "package_id")
	t.TransactionHash = field.NewString(table, "transaction_hash")

	t.fillFieldMap()

	return t
}

func (t *tradeHash) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tradeHash) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["package_id"] = t.PackageId
	t.fieldMap["transaction_hash"] = t.TransactionHash
}

func (t tradeHash) clone(db *gorm.DB) tradeHash {
	t.tradeHashDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tradeHash) replaceDB(db *gorm.DB) tradeHash {
	t.tradeHashDo.ReplaceDB(db)
	return t
}

type tradeHashDo struct{ gen.DO }

type ITradeHashDo interface {
	gen.SubQuery
	Debug() ITradeHashDo
	WithContext(ctx context.Context) ITradeHashDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITradeHashDo
	WriteDB() ITradeHashDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITradeHashDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITradeHashDo
	Not(conds ...gen.Condition) ITradeHashDo
	Or(conds ...gen.Condition) ITradeHashDo
	Select(conds ...field.Expr) ITradeHashDo
	Where(conds ...gen.Condition) ITradeHashDo
	Order(conds ...field.Expr) ITradeHashDo
	Distinct(cols ...field.Expr) ITradeHashDo
	Omit(cols ...field.Expr) ITradeHashDo
	Join(table schema.Tabler, on ...field.Expr) ITradeHashDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITradeHashDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITradeHashDo
	Group(cols ...field.Expr) ITradeHashDo
	Having(conds ...gen.Condition) ITradeHashDo
	Limit(limit int) ITradeHashDo
	Offset(offset int) ITradeHashDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITradeHashDo
	Unscoped() ITradeHashDo
	Create(values ...*models.TradeHash) error
	CreateInBatches(values []*models.TradeHash, batchSize int) error
	Save(values ...*models.TradeHash) error
	First() (*models.TradeHash, error)
	Take() (*models.TradeHash, error)
	Last() (*models.TradeHash, error)
	Find() ([]*models.TradeHash, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.TradeHash, err error)
	FindInBatches(result *[]*models.TradeHash, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.TradeHash) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITradeHashDo
	Assign(attrs ...field.AssignExpr) ITradeHashDo
	Joins(fields ...field.RelationField) ITradeHashDo
	Preload(fields ...field.RelationField) ITradeHashDo
	FirstOrInit() (*models.TradeHash, error)
	FirstOrCreate() (*models.TradeHash, error)
	FindByPage(offset int, limit int) (result []*models.TradeHash, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITradeHashDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tradeHashDo) Debug() ITradeHashDo {
	return t.withDO(t.DO.Debug())
}

func (t tradeHashDo) WithContext(ctx context.Context) ITradeHashDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tradeHashDo) ReadDB() ITradeHashDo {
	return t.Clauses(dbresolver.Read)
}

func (t tradeHashDo) WriteDB() ITradeHashDo {
	return t.Clauses(dbresolver.Write)
}

func (t tradeHashDo) Session(config *gorm.Session) ITradeHashDo {
	return t.withDO(t.DO.Session(config))
}

func (t tradeHashDo) Clauses(conds ...clause.Expression) ITradeHashDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tradeHashDo) Returning(value interface{}, columns ...string) ITradeHashDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tradeHashDo) Not(conds ...gen.Condition) ITradeHashDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tradeHashDo) Or(conds ...gen.Condition) ITradeHashDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tradeHashDo) Select(conds ...field.Expr) ITradeHashDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tradeHashDo) Where(conds ...gen.Condition) ITradeHashDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tradeHashDo) Order(conds ...field.Expr) ITradeHashDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tradeHashDo) Distinct(cols ...field.Expr) ITradeHashDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tradeHashDo) Omit(cols ...field.Expr) ITradeHashDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tradeHashDo) Join(table schema.Tabler, on ...field.Expr) ITradeHashDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tradeHashDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITradeHashDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tradeHashDo) RightJoin(table schema.Tabler, on ...field.Expr) ITradeHashDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tradeHashDo) Group(cols ...field.Expr) ITradeHashDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tradeHashDo) Having(conds ...gen.Condition) ITradeHashDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tradeHashDo) Limit(limit int) ITradeHashDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tradeHashDo) Offset(offset int) ITradeHashDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tradeHashDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITradeHashDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tradeHashDo) Unscoped() ITradeHashDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tradeHashDo) Create(values ...*models.TradeHash) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tradeHashDo) CreateInBatches(values []*models.TradeHash, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tradeHashDo) Save(values ...*models.TradeHash) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tradeHashDo) First() (*models.TradeHash, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.TradeHash), nil
	}
}

func (t tradeHashDo) Take() (*models.TradeHash, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.TradeHash), nil
	}
}

func (t tradeHashDo) Last() (*models.TradeHash, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.TradeHash), nil
	}
}

func (t tradeHashDo) Find() ([]*models.TradeHash, error) {
	result, err := t.DO.Find()
	return result.([]*models.TradeHash), err
}

func (t tradeHashDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.TradeHash, err error) {
	buf := make([]*models.TradeHash, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tradeHashDo) FindInBatches(result *[]*models.TradeHash, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tradeHashDo) Attrs(attrs ...field.AssignExpr) ITradeHashDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tradeHashDo) Assign(attrs ...field.AssignExpr) ITradeHashDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tradeHashDo) Joins(fields ...field.RelationField) ITradeHashDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tradeHashDo) Preload(fields ...field.RelationField) ITradeHashDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tradeHashDo) FirstOrInit() (*models.TradeHash, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.TradeHash), nil
	}
}

func (t tradeHashDo) FirstOrCreate() (*models.TradeHash, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.TradeHash), nil
	}
}

func (t tradeHashDo) FindByPage(offset int, limit int) (result []*models.TradeHash, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tradeHashDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tradeHashDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tradeHashDo) Delete(models ...*models.TradeHash) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tradeHashDo) withDO(do gen.Dao) *tradeHashDo {
	t.DO = *do.(*gen.DO)
	return t
}
