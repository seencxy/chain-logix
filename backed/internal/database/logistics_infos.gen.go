// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"backed/app/models"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newLogisticsInfo(db *gorm.DB, opts ...gen.DOOption) logisticsInfo {
	_logisticsInfo := logisticsInfo{}

	_logisticsInfo.logisticsInfoDo.UseDB(db, opts...)
	_logisticsInfo.logisticsInfoDo.UseModel(&models.LogisticsInfo{})

	tableName := _logisticsInfo.logisticsInfoDo.TableName()
	_logisticsInfo.ALL = field.NewAsterisk(tableName)
	_logisticsInfo.ID = field.NewUint(tableName, "id")
	_logisticsInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_logisticsInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_logisticsInfo.DeletedAt = field.NewField(tableName, "deleted_at")
	_logisticsInfo.PackageId = field.NewString(tableName, "package_id")
	_logisticsInfo.Email = field.NewString(tableName, "email")
	_logisticsInfo.SendPerson = field.NewString(tableName, "send_person")
	_logisticsInfo.SendPhoneNumber = field.NewString(tableName, "send_phone_number")
	_logisticsInfo.SendDetailedAddress = field.NewString(tableName, "send_detailed_address")
	_logisticsInfo.SendCompanyName = field.NewString(tableName, "send_company_name")
	_logisticsInfo.ReceivePerson = field.NewString(tableName, "receive_person")
	_logisticsInfo.ReceivePhoneNumber = field.NewString(tableName, "receive_phone_number")
	_logisticsInfo.ReceiveAddress = field.NewString(tableName, "receive_address")
	_logisticsInfo.ReceiveCompanyName = field.NewString(tableName, "receive_company_name")
	_logisticsInfo.TradeNo = field.NewString(tableName, "trade_no")
	_logisticsInfo.Status = field.NewInt64(tableName, "status")

	_logisticsInfo.fillFieldMap()

	return _logisticsInfo
}

type logisticsInfo struct {
	logisticsInfoDo

	ALL                 field.Asterisk
	ID                  field.Uint
	CreatedAt           field.Time
	UpdatedAt           field.Time
	DeletedAt           field.Field
	PackageId           field.String
	Email               field.String
	SendPerson          field.String
	SendPhoneNumber     field.String
	SendDetailedAddress field.String
	SendCompanyName     field.String
	ReceivePerson       field.String
	ReceivePhoneNumber  field.String
	ReceiveAddress      field.String
	ReceiveCompanyName  field.String
	TradeNo             field.String
	Status              field.Int64

	fieldMap map[string]field.Expr
}

func (l logisticsInfo) Table(newTableName string) *logisticsInfo {
	l.logisticsInfoDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logisticsInfo) As(alias string) *logisticsInfo {
	l.logisticsInfoDo.DO = *(l.logisticsInfoDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logisticsInfo) updateTableName(table string) *logisticsInfo {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewUint(table, "id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.DeletedAt = field.NewField(table, "deleted_at")
	l.PackageId = field.NewString(table, "package_id")
	l.Email = field.NewString(table, "email")
	l.SendPerson = field.NewString(table, "send_person")
	l.SendPhoneNumber = field.NewString(table, "send_phone_number")
	l.SendDetailedAddress = field.NewString(table, "send_detailed_address")
	l.SendCompanyName = field.NewString(table, "send_company_name")
	l.ReceivePerson = field.NewString(table, "receive_person")
	l.ReceivePhoneNumber = field.NewString(table, "receive_phone_number")
	l.ReceiveAddress = field.NewString(table, "receive_address")
	l.ReceiveCompanyName = field.NewString(table, "receive_company_name")
	l.TradeNo = field.NewString(table, "trade_no")
	l.Status = field.NewInt64(table, "status")

	l.fillFieldMap()

	return l
}

func (l *logisticsInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logisticsInfo) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 16)
	l.fieldMap["id"] = l.ID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt
	l.fieldMap["package_id"] = l.PackageId
	l.fieldMap["email"] = l.Email
	l.fieldMap["send_person"] = l.SendPerson
	l.fieldMap["send_phone_number"] = l.SendPhoneNumber
	l.fieldMap["send_detailed_address"] = l.SendDetailedAddress
	l.fieldMap["send_company_name"] = l.SendCompanyName
	l.fieldMap["receive_person"] = l.ReceivePerson
	l.fieldMap["receive_phone_number"] = l.ReceivePhoneNumber
	l.fieldMap["receive_address"] = l.ReceiveAddress
	l.fieldMap["receive_company_name"] = l.ReceiveCompanyName
	l.fieldMap["trade_no"] = l.TradeNo
	l.fieldMap["status"] = l.Status
}

func (l logisticsInfo) clone(db *gorm.DB) logisticsInfo {
	l.logisticsInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l logisticsInfo) replaceDB(db *gorm.DB) logisticsInfo {
	l.logisticsInfoDo.ReplaceDB(db)
	return l
}

type logisticsInfoDo struct{ gen.DO }

type ILogisticsInfoDo interface {
	gen.SubQuery
	Debug() ILogisticsInfoDo
	WithContext(ctx context.Context) ILogisticsInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILogisticsInfoDo
	WriteDB() ILogisticsInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILogisticsInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILogisticsInfoDo
	Not(conds ...gen.Condition) ILogisticsInfoDo
	Or(conds ...gen.Condition) ILogisticsInfoDo
	Select(conds ...field.Expr) ILogisticsInfoDo
	Where(conds ...gen.Condition) ILogisticsInfoDo
	Order(conds ...field.Expr) ILogisticsInfoDo
	Distinct(cols ...field.Expr) ILogisticsInfoDo
	Omit(cols ...field.Expr) ILogisticsInfoDo
	Join(table schema.Tabler, on ...field.Expr) ILogisticsInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILogisticsInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILogisticsInfoDo
	Group(cols ...field.Expr) ILogisticsInfoDo
	Having(conds ...gen.Condition) ILogisticsInfoDo
	Limit(limit int) ILogisticsInfoDo
	Offset(offset int) ILogisticsInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILogisticsInfoDo
	Unscoped() ILogisticsInfoDo
	Create(values ...*models.LogisticsInfo) error
	CreateInBatches(values []*models.LogisticsInfo, batchSize int) error
	Save(values ...*models.LogisticsInfo) error
	First() (*models.LogisticsInfo, error)
	Take() (*models.LogisticsInfo, error)
	Last() (*models.LogisticsInfo, error)
	Find() ([]*models.LogisticsInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.LogisticsInfo, err error)
	FindInBatches(result *[]*models.LogisticsInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.LogisticsInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILogisticsInfoDo
	Assign(attrs ...field.AssignExpr) ILogisticsInfoDo
	Joins(fields ...field.RelationField) ILogisticsInfoDo
	Preload(fields ...field.RelationField) ILogisticsInfoDo
	FirstOrInit() (*models.LogisticsInfo, error)
	FirstOrCreate() (*models.LogisticsInfo, error)
	FindByPage(offset int, limit int) (result []*models.LogisticsInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILogisticsInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l logisticsInfoDo) Debug() ILogisticsInfoDo {
	return l.withDO(l.DO.Debug())
}

func (l logisticsInfoDo) WithContext(ctx context.Context) ILogisticsInfoDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l logisticsInfoDo) ReadDB() ILogisticsInfoDo {
	return l.Clauses(dbresolver.Read)
}

func (l logisticsInfoDo) WriteDB() ILogisticsInfoDo {
	return l.Clauses(dbresolver.Write)
}

func (l logisticsInfoDo) Session(config *gorm.Session) ILogisticsInfoDo {
	return l.withDO(l.DO.Session(config))
}

func (l logisticsInfoDo) Clauses(conds ...clause.Expression) ILogisticsInfoDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l logisticsInfoDo) Returning(value interface{}, columns ...string) ILogisticsInfoDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l logisticsInfoDo) Not(conds ...gen.Condition) ILogisticsInfoDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l logisticsInfoDo) Or(conds ...gen.Condition) ILogisticsInfoDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l logisticsInfoDo) Select(conds ...field.Expr) ILogisticsInfoDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l logisticsInfoDo) Where(conds ...gen.Condition) ILogisticsInfoDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l logisticsInfoDo) Order(conds ...field.Expr) ILogisticsInfoDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l logisticsInfoDo) Distinct(cols ...field.Expr) ILogisticsInfoDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l logisticsInfoDo) Omit(cols ...field.Expr) ILogisticsInfoDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l logisticsInfoDo) Join(table schema.Tabler, on ...field.Expr) ILogisticsInfoDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l logisticsInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILogisticsInfoDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l logisticsInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ILogisticsInfoDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l logisticsInfoDo) Group(cols ...field.Expr) ILogisticsInfoDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l logisticsInfoDo) Having(conds ...gen.Condition) ILogisticsInfoDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l logisticsInfoDo) Limit(limit int) ILogisticsInfoDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l logisticsInfoDo) Offset(offset int) ILogisticsInfoDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l logisticsInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILogisticsInfoDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l logisticsInfoDo) Unscoped() ILogisticsInfoDo {
	return l.withDO(l.DO.Unscoped())
}

func (l logisticsInfoDo) Create(values ...*models.LogisticsInfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l logisticsInfoDo) CreateInBatches(values []*models.LogisticsInfo, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l logisticsInfoDo) Save(values ...*models.LogisticsInfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l logisticsInfoDo) First() (*models.LogisticsInfo, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.LogisticsInfo), nil
	}
}

func (l logisticsInfoDo) Take() (*models.LogisticsInfo, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.LogisticsInfo), nil
	}
}

func (l logisticsInfoDo) Last() (*models.LogisticsInfo, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.LogisticsInfo), nil
	}
}

func (l logisticsInfoDo) Find() ([]*models.LogisticsInfo, error) {
	result, err := l.DO.Find()
	return result.([]*models.LogisticsInfo), err
}

func (l logisticsInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.LogisticsInfo, err error) {
	buf := make([]*models.LogisticsInfo, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l logisticsInfoDo) FindInBatches(result *[]*models.LogisticsInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l logisticsInfoDo) Attrs(attrs ...field.AssignExpr) ILogisticsInfoDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l logisticsInfoDo) Assign(attrs ...field.AssignExpr) ILogisticsInfoDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l logisticsInfoDo) Joins(fields ...field.RelationField) ILogisticsInfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l logisticsInfoDo) Preload(fields ...field.RelationField) ILogisticsInfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l logisticsInfoDo) FirstOrInit() (*models.LogisticsInfo, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.LogisticsInfo), nil
	}
}

func (l logisticsInfoDo) FirstOrCreate() (*models.LogisticsInfo, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.LogisticsInfo), nil
	}
}

func (l logisticsInfoDo) FindByPage(offset int, limit int) (result []*models.LogisticsInfo, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l logisticsInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l logisticsInfoDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l logisticsInfoDo) Delete(models ...*models.LogisticsInfo) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *logisticsInfoDo) withDO(do gen.Dao) *logisticsInfoDo {
	l.DO = *do.(*gen.DO)
	return l
}
